// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wiring

import (
	"github.com/google/wire"
	"goload/internal/app"
	"goload/internal/configs"
	"goload/internal/dataaccess"
	"goload/internal/dataaccess/database"
	"goload/internal/handler"
	"goload/internal/handler/grpc"
	"goload/internal/handler/http"
	"goload/internal/logic"
	"goload/internal/utils"
)

// Injectors from wire.go:

func InitializeServer(configFilePath configs.ConfigFilePath) (*app.Server, func(), error) {
	config, err := configs.NewConfig(configFilePath)
	if err != nil {
		return nil, nil, err
	}
	configsDatabase := config.Database
	log := config.Log
	logger, cleanup, err := utils.InitializeLogger(log)
	if err != nil {
		return nil, nil, err
	}
	db, cleanup2, err := database.InitializeDBAndMigrateUp(configsDatabase, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	goquDatabase := database.InitializeGoquDB(db)
	accountRepository := database.NewAccountRepository(goquDatabase)
	accountPasswordRepository := database.NewAccountPasswordRepository(goquDatabase)
	auth := config.Auth
	hashService := logic.NewHashService(auth)
	publicKeyRepository := database.NewPublicKeyRepository(goquDatabase)
	tokenService, err := logic.NewTokenService(accountRepository, publicKeyRepository, auth)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	accountService := logic.NewAccountService(goquDatabase, accountRepository, accountPasswordRepository, hashService, tokenService)
	goLoadServiceServer := grpc.NewHandler(accountService)
	configsGRPC := config.GRPC
	server := grpc.NewServer(goLoadServiceServer, configsGRPC, logger)
	configsHTTP := config.HTTP
	httpServer := http.NewServer(configsHTTP, configsGRPC, logger)
	appServer := app.NewServer(server, httpServer, logger)
	return appServer, func() {
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

var WireSet = wire.NewSet(configs.WireSet, dataaccess.WireSet, logic.WireSet, handler.WireSet, utils.WireSet, app.WireSet)
