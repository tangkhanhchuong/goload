// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wiring

import (
	"github.com/google/wire"
	"goload/internal/app"
	"goload/internal/configs"
	"goload/internal/dataaccess"
	"goload/internal/dataaccess/database"
	"goload/internal/handler"
	"goload/internal/handler/grpc"
	"goload/internal/handler/http"
	"goload/internal/logic"
	"goload/internal/utils"
)

// Injectors from wire.go:

func InitializeServer(configFilePath configs.ConfigFilePath) (*app.Server, func(), error) {
	config, err := configs.NewConfig(configFilePath)
	if err != nil {
		return nil, nil, err
	}
	configsDatabase := config.Database
	db, cleanup, err := database.InitializeDB(configsDatabase)
	if err != nil {
		return nil, nil, err
	}
	log := config.Log
	logger, cleanup2, err := utils.InitializeLogger(log)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	migrator := database.NewMigrator(db, logger, "postgres")
	goLoadServiceServer := grpc.NewHandler()
	server := grpc.NewServer(goLoadServiceServer)
	httpServer := http.NewServer()
	appServer := app.NewServer(migrator, server, httpServer, logger)
	return appServer, func() {
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

var WireSet = wire.NewSet(app.WireSet, configs.WireSet, dataaccess.WireSet, logic.WireSet, handler.WireSet, utils.WireSet)
